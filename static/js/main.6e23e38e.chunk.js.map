{"version":3,"sources":["ScatterPlot.js","App.js","serviceWorker.js","index.js"],"names":["data","container","useRef","useEffect","svg","select","current","attr","dates","map","d","xScale","scaleTime","domain","min","max","range","width","yScale","scaleLinear","height","clamp","circles","selectAll","transition","enter","append","exit","duration","remove","xAxis","axisBottom","scale","ticks","timeWeek","every","call","yAxis","axisLeft","ref","id","getData","endpoint","key","body","fetch","method","headers","JSON","stringify","then","r","json","listCounties","queryType","parameters","listStates","Selector","items","setItems","item","name","type","checked","onChange","itemName","_","colorPollutant","pollutant","useState","sites","setSites","counties","setCounties","states","setStates","types","setTypes","queries","setQueries","setData","ENDPOINT","process","API_KEY","addCheckboxes","l","i","a","Promise","resolve","effect","selected","filter","city","county","state","Object","values","undefined","length","results","normalized","Date","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e23e38e.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react'\nimport {\n  select,\n  scaleLinear,\n  scaleTime,\n  min,\n  max,\n  axisBottom,\n  axisLeft,\n  timeWeek,\n} from 'd3'\nimport './ScatterPlot.css'\n\nexport default ({data}) => {\n  const container = useRef(null)\n\n  useEffect(() => {\n    // TODO: programmatically fetch width and height\n    const width = 1250\n    const height = 750\n    const padding = 50\n\n    const svg = select(container.current)\n    svg.attr('width', width).attr('height', height)\n\n    const dates = data.map((d) => d[0])\n    const xScale = scaleTime()\n      .domain([min(dates), max(dates)])\n      .range([padding, width - padding])\n\n    const yScale = scaleLinear()\n      .domain([0, max(data.map((d) => d[2]))])\n      .range([height - padding, padding])\n      .clamp(true)\n\n    const circles = svg.selectAll('circle').data(data)\n\n    circles\n      .attr('fill', (d) => d[3])\n      .transition()\n      .attr('cx', (d) => xScale(d[0]))\n      .attr('cy', (d) => yScale(d[2]))\n      .attr('r', 3)\n\n    circles\n      .enter()\n      .append('circle')\n      .attr('fill', (d) => d[3])\n      .transition()\n      .attr('cx', (d) => xScale(d[0]))\n      .attr('cy', (d) => yScale(d[2]))\n      .attr('r', 3)\n\n    circles.exit().transition().duration(5).remove()\n\n    const xAxis = axisBottom().scale(xScale).ticks(timeWeek.every(1))\n    svg\n      .select('g#axisBottom')\n      .transition()\n      .attr('class', 'axis')\n      .attr('transform', `translate(0, ${height - padding})`)\n      .call(xAxis)\n\n    const yAxis = axisLeft().scale(yScale)\n    svg\n      .select('g#axisLeft')\n      .transition()\n      .attr('class', 'axis')\n      .attr('transform', `translate(${padding}, 0)`)\n      .call(yAxis)\n  }, [data])\n\n  return (\n    <svg ref={container}>\n      <g id=\"axisBottom\"></g>\n      <g id=\"axisLeft\"></g>\n    </svg>\n  )\n}\n","import React, {Fragment, useState, useEffect} from 'react'\nimport ScatterPlot from './ScatterPlot'\nimport './App.css'\n\nconst getData = (endpoint, key, body) => {\n  return fetch(endpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': key,\n    },\n    body: JSON.stringify(body),\n  }).then((r) => r.json())\n}\n\nconst listSites = (endpoint, key) =>\n  getData(endpoint, key, {\n    queryType: 'findAllSiteNames',\n    parameters: {},\n  })\n\nconst listCounties = (endpoint, key) =>\n  getData(endpoint, key, {\n    queryType: 'findAllCountyNames',\n    parameters: {},\n  })\n\nconst listStates = (endpoint, key) =>\n  getData(endpoint, key, {\n    queryType: 'findAllStateNames',\n    parameters: {},\n  })\n\nconst listTypes = (endpoint, key) => Promise.resolve([['O3'], ['CO'], ['SO2'], ['NO2']])\n\nconst Selector = ({items, setItems}) => {\n  const selectItem = (itemName) => (_) =>\n    setItems(items.map((item) => ({...item, checked: item.name === itemName})))\n\n  return (\n    <form>\n      {items &&\n        items.map((item) => (\n          <Fragment key={item.name}>\n            <label>\n              <input\n                name={item.name}\n                type=\"radio\"\n                checked={item.checked}\n                onChange={selectItem(item.name)}\n              />\n              {item.name}\n            </label>\n            <br />\n          </Fragment>\n        ))}\n    </form>\n  )\n}\n\nconst colorPollutant = (pollutant) => {\n  if (pollutant === 'O3') return 'orange'\n  else if (pollutant === 'CO') return 'blue'\n  else if (pollutant === 'SO2') return 'red'\n  else if (pollutant === 'NO2') return 'brown'\n  else return 'black'\n}\n\nconst makeRequest = (queryType, city, county, state, pollutant) => {\n  if (queryType === 'pollutantBySiteAndType') {\n    return {queryType, parameters: {city, pollutant}}\n  } else if (queryType === 'pollutantByCountyAndType') {\n    return {queryType, parameters: {county, pollutant}}\n  } else if (queryType === 'pollutantByStateAndType') {\n    return {queryType, parameters: {state, pollutant}}\n  }\n}\n\nexport default () => {\n  const [sites, setSites] = useState([])\n  const [counties, setCounties] = useState([])\n  const [states, setStates] = useState([])\n  const [types, setTypes] = useState([])\n  const [queries, setQueries] = useState([\n    {name: 'Site and Type', queryType: 'pollutantBySiteAndType', checked: true},\n    {name: 'County and Type', queryType: 'pollutantByCountyAndType', checked: false},\n    {name: 'State and Type', queryType: 'pollutantByStateAndType', checked: false},\n  ])\n  const [data, setData] = useState([])\n\n  const ENDPOINT = process.env.REACT_APP_ENDPOINT\n  const API_KEY = process.env.REACT_APP_API_KEY\n\n  const addCheckboxes = (l) => l.map((r, i) => ({name: r[0], checked: i === 0}))\n\n  useEffect(() => {\n    const effect = async () => {\n      setSites(addCheckboxes(await listSites(ENDPOINT, API_KEY)))\n      setCounties(addCheckboxes(await listCounties(ENDPOINT, API_KEY)))\n      setStates(addCheckboxes(await listStates(ENDPOINT, API_KEY)))\n      setTypes(addCheckboxes(await listTypes(ENDPOINT, API_KEY)))\n    }\n    effect()\n  }, [ENDPOINT, API_KEY])\n\n  const selected = (items) => items?.filter((i) => i?.checked)[0]\n\n  useEffect(() => {\n    const effect = async () => {\n      const body = makeRequest(\n        selected(queries)?.queryType,\n        selected(sites)?.name,\n        selected(counties)?.name,\n        selected(states)?.name,\n        selected(types)?.name,\n      )\n\n      const isReady =\n        0 ===\n        Object.values(body.parameters).filter((i) => i === null || i === undefined)\n          .length\n\n      if (isReady) {\n        const results = await getData(ENDPOINT, API_KEY, body)\n        const normalized = results.map((d) => {\n          if (d.length === 3) return [new Date(d[0]), d[1], d[2], colorPollutant(d[1])]\n          else return [new Date(d[0]), d[2], d[3], colorPollutant(d[2])]\n        })\n        setData(normalized)\n      }\n    }\n    effect()\n  }, [queries, sites, counties, states, types, ENDPOINT, API_KEY])\n\n  return (\n    <>\n      <h1>Air Quality Data Visualization Tool</h1>\n      <h2>Michael Cai, Jacob Farabee, Kesav Kadalazhi, Madison Kuhler, Brennan Kuhman, Jack Summers</h2>\n      <div class=\"toolbar\">\n      <div class=\"row\">\n        \n          <div class=\"column\">\n          <h3>Query Type</h3>\n          <Selector items={queries} setItems={setQueries} />\n            <br />\n            \n          </div>\n\n          <div class=\"column\">\n            \n            {selected(queries).queryType === 'pollutantBySiteAndType' && (\n                <>\n                  <h3>Site</h3>\n                  <Selector items={sites} setItems={setSites} />\n                  <br />\n                </>\n              )}\n\n            {selected(queries).queryType === 'pollutantByCountyAndType' && (\n              <>\n                <h3>County</h3>\n                <Selector items={counties} setItems={setCounties} />\n                <br />\n              </>\n            )}\n\n            {selected(queries).queryType === 'pollutantByStateAndType' && (\n              <>\n                <h3>State</h3>\n                <Selector items={states} setItems={setStates} />\n                <br />\n              </>\n            )}\n\n          </div>\n          <div class=\"column\">\n            <h3>Pollutant Type</h3>\n            <Selector items={types} setItems={setTypes} />\n            <br />\n          </div>\n      </div>\n      </div>\n\n      \n\n      <div class=\"graph\">\n        <ScatterPlot data={data} />\n      </div>\n      \n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}