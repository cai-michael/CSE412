{"version":3,"sources":["ScatterPlot.js","App.js","serviceWorker.js","index.js"],"names":["data","container","useRef","useEffect","svg","select","current","attr","dates","map","d","xScale","scaleTime","domain","min","max","range","width","yScale","scaleLinear","height","clamp","circles","selectAll","transition","enter","append","exit","duration","remove","xAxis","axisBottom","scale","ticks","timeWeek","every","call","yAxis","axisLeft","ref","id","getData","endpoint","key","body","fetch","method","headers","JSON","stringify","then","r","json","StateSelector","states","setStates","state","name","type","checked","onChange","stateName","_","PollutantSelector","pollutants","setPollutants","pollutant","pollutantName","p","useState","setData","ENDPOINT","process","API_KEY","a","selectedState","filter","selectedPollutants","length","queryType","parameters","results","includes","Date","effect","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9acba497.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react'\nimport {\n  select,\n  scaleLinear,\n  scaleTime,\n  min,\n  max,\n  axisBottom,\n  axisLeft,\n  timeWeek,\n} from 'd3'\nimport './ScatterPlot.css'\n\nexport default ({data}) => {\n  const container = useRef(null)\n\n  useEffect(() => {\n    // TODO: programmatically fetch width and height\n    const width = 1250\n    const height = 750\n    const padding = 50\n\n    const svg = select(container.current)\n    svg.attr('width', width).attr('height', height)\n\n    const dates = data.map((d) => d[0])\n    const xScale = scaleTime()\n      .domain([min(dates), max(dates)])\n      .range([padding, width - padding])\n\n    const yScale = scaleLinear()\n      .domain([0, max(data.map((d) => d[2]))])\n      .range([height - padding, padding])\n      .clamp(true)\n\n    const circles = svg.selectAll('circle').data(data)\n\n    circles\n      .attr('fill', (d) => d[3])\n      .transition()\n      .attr('cx', (d) => xScale(d[0]))\n      .attr('cy', (d) => yScale(d[2]))\n      .attr('r', 3)\n\n    circles\n      .enter()\n      .append('circle')\n      .attr('fill', (d) => d[3])\n      .transition()\n      .attr('cx', (d) => xScale(d[0]))\n      .attr('cy', (d) => yScale(d[2]))\n      .attr('r', 3)\n\n    circles.exit().transition().duration(5).remove()\n\n    const xAxis = axisBottom().scale(xScale).ticks(timeWeek.every(1))\n    svg\n      .select('g#axisBottom')\n      .transition()\n      .attr('class', 'axis')\n      .attr('transform', `translate(0, ${height - padding})`)\n      .call(xAxis)\n\n    const yAxis = axisLeft().scale(yScale)\n    svg\n      .select('g#axisLeft')\n      .transition()\n      .attr('class', 'axis')\n      .attr('transform', `translate(${padding}, 0)`)\n      .call(yAxis)\n  }, [data])\n\n  return (\n    <svg ref={container}>\n      <g id=\"axisBottom\"></g>\n      <g id=\"axisLeft\"></g>\n    </svg>\n  )\n}\n","import React, {Fragment, useState, useEffect} from 'react'\nimport ScatterPlot from './ScatterPlot'\nimport './App.css'\n\nconst getData = (endpoint, key, body) => {\n  return fetch(endpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': key,\n    },\n    body: JSON.stringify(body),\n  }).then((r) => r.json())\n}\n\nconst StateSelector = ({states, setStates}) => {\n  const selectState = (stateName) => (_) =>\n    setStates(states.map((state) => ({...state, checked: state.name === stateName})))\n\n  return (\n    <form>\n      {states.map((state) => (\n        <Fragment key={state.name}>\n          <label>\n            <input\n              name={state.name}\n              type=\"radio\"\n              checked={state.checked}\n              onChange={selectState(state.name)}\n            />\n            {state.name}\n          </label>\n          <br />\n        </Fragment>\n      ))}\n    </form>\n  )\n}\n\nconst PollutantSelector = ({pollutants, setPollutants}) => {\n  const selectPollutant = (pollutantName) => (_) =>\n    setPollutants(pollutants.map((p) => ({...p, checked: p.name === pollutantName})))\n\n  return (\n    <form>\n      {pollutants.map((pollutant) => (\n        <Fragment key={pollutant.name}>\n          <label>\n            <input\n              name={pollutant.name}\n              type=\"radio\"\n              checked={pollutant.checked}\n              onChange={selectPollutant(pollutant.name)}\n            />\n            {pollutant.name}\n          </label>\n          <br />\n        </Fragment>\n      ))}\n    </form>\n  )\n}\n\nconst colorPollutant = (pollutant) => {\n  if (pollutant === 'O3') return 'orange'\n  else if (pollutant === 'CO') return 'blue'\n  else if (pollutant === 'SO2') return 'red'\n  else if (pollutant === 'NO2') return 'brown'\n  else return 'black'\n}\n\nexport default () => {\n  const [states, setStates] = useState([\n    {name: 'Arizona', checked: true},\n    {name: 'California', checked: false},\n  ])\n  const [pollutants, setPollutants] = useState([\n    {name: 'O3', checked: true},\n    {name: 'CO', checked: false},\n    {name: 'SO2', checked: false},\n    {name: 'NO2', checked: false},\n  ])\n\n  const [data, setData] = useState([])\n\n  const ENDPOINT = process.env.REACT_APP_ENDPOINT\n  const API_KEY = process.env.REACT_APP_API_KEY\n\n  useEffect(() => {\n    const effect = async () => {\n      const selectedState = states.filter((state) => state.checked)[0]\n      const selectedPollutants = pollutants.filter((p) => p.checked).map((p) => p.name)\n\n      if (selectedState && selectedPollutants.length !== 0) {\n        const body = {\n          queryType: 'pollutantByState',\n          parameters: {state: selectedState.name},\n        }\n        const results = await getData(ENDPOINT, API_KEY, body)\n        setData(\n          results\n            .filter((d) => selectedPollutants.includes(d[1]))\n            .map((d) => [new Date(d[0]), d[1], d[2], colorPollutant(d[1])]),\n        )\n      }\n\n      // TODO: investigate alternate query types\n      // const body = {queryType: 'pollutantBySite', parameters: {city: 'San Jose'}}\n      // const body = {queryType: 'testRestAPI', parameters: {pollutant: 'NO2'}}\n      // const body = {\n      //   queryType: 'siteMeansForSpecifiedPollutant',\n      //   parameters: {pollutant: 'NO2'},\n      // }\n    }\n    effect()\n  }, [states, pollutants, ENDPOINT, API_KEY])\n\n  return (\n    <>\n      <div class=\"heading\">\n        <h1>Pollutant Data Visualization</h1>\n        <h2>Michael Cai, Jacob Farabee, Kesav Kadalazhi, Madison Kuhler, Brennan Kuhman, Jack Summers</h2>\n      </div>\n      <div class=\"toolbar\">\n\n        <div class=\"row\">\n          <div class=\"column\">\n            <h4>State</h4>\n            <StateSelector {...{states, setStates}} />\n          </div>\n          \n          <div class=\"column\">\n            <h4>Pollutant</h4>\n            <PollutantSelector {...{pollutants, setPollutants}} />\n          </div>\n\n        </div>\n      </div>\n      \n\n      <div class=\"graph\">\n        <ScatterPlot {...{data}} />\n      </div>\n      \n      \n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}